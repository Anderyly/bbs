// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Article:        newArticle(db, opts...),
		ArticleComment: newArticleComment(db, opts...),
		ArticleLike:    newArticleLike(db, opts...),
		Config:         newConfig(db, opts...),
		User:           newUser(db, opts...),
		UserLoginLog:   newUserLoginLog(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Article        article
	ArticleComment articleComment
	ArticleLike    articleLike
	Config         config
	User           user
	UserLoginLog   userLoginLog
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Article:        q.Article.clone(db),
		ArticleComment: q.ArticleComment.clone(db),
		ArticleLike:    q.ArticleLike.clone(db),
		Config:         q.Config.clone(db),
		User:           q.User.clone(db),
		UserLoginLog:   q.UserLoginLog.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Article:        q.Article.replaceDB(db),
		ArticleComment: q.ArticleComment.replaceDB(db),
		ArticleLike:    q.ArticleLike.replaceDB(db),
		Config:         q.Config.replaceDB(db),
		User:           q.User.replaceDB(db),
		UserLoginLog:   q.UserLoginLog.replaceDB(db),
	}
}

type queryCtx struct {
	Article        *articleDo
	ArticleComment *articleCommentDo
	ArticleLike    *articleLikeDo
	Config         *configDo
	User           *userDo
	UserLoginLog   *userLoginLogDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Article:        q.Article.WithContext(ctx),
		ArticleComment: q.ArticleComment.WithContext(ctx),
		ArticleLike:    q.ArticleLike.WithContext(ctx),
		Config:         q.Config.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserLoginLog:   q.UserLoginLog.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
