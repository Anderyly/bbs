// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bbs/dao/model"
)

func newArticleLike(db *gorm.DB, opts ...gen.DOOption) articleLike {
	_articleLike := articleLike{}

	_articleLike.articleLikeDo.UseDB(db, opts...)
	_articleLike.articleLikeDo.UseModel(&model.ArticleLike{})

	tableName := _articleLike.articleLikeDo.TableName()
	_articleLike.ALL = field.NewAsterisk(tableName)
	_articleLike.Id = field.NewInt(tableName, "id")
	_articleLike.CreatedAt = field.NewInt64(tableName, "created_at")
	_articleLike.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_articleLike.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_articleLike.UserId = field.NewInt(tableName, "user_id")
	_articleLike.ArticleId = field.NewInt(tableName, "article_id")

	_articleLike.fillFieldMap()

	return _articleLike
}

type articleLike struct {
	articleLikeDo articleLikeDo

	ALL       field.Asterisk
	Id        field.Int
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64
	UserId    field.Int
	ArticleId field.Int

	fieldMap map[string]field.Expr
}

func (a articleLike) Table(newTableName string) *articleLike {
	a.articleLikeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleLike) As(alias string) *articleLike {
	a.articleLikeDo.DO = *(a.articleLikeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleLike) updateTableName(table string) *articleLike {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewInt(table, "id")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")
	a.DeletedAt = field.NewInt64(table, "deleted_at")
	a.UserId = field.NewInt(table, "user_id")
	a.ArticleId = field.NewInt(table, "article_id")

	a.fillFieldMap()

	return a
}

func (a *articleLike) WithContext(ctx context.Context) *articleLikeDo {
	return a.articleLikeDo.WithContext(ctx)
}

func (a articleLike) TableName() string { return a.articleLikeDo.TableName() }

func (a articleLike) Alias() string { return a.articleLikeDo.Alias() }

func (a *articleLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleLike) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.Id
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["user_id"] = a.UserId
	a.fieldMap["article_id"] = a.ArticleId
}

func (a articleLike) clone(db *gorm.DB) articleLike {
	a.articleLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleLike) replaceDB(db *gorm.DB) articleLike {
	a.articleLikeDo.ReplaceDB(db)
	return a
}

type articleLikeDo struct{ gen.DO }

func (a articleLikeDo) Debug() *articleLikeDo {
	return a.withDO(a.DO.Debug())
}

func (a articleLikeDo) WithContext(ctx context.Context) *articleLikeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleLikeDo) ReadDB() *articleLikeDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleLikeDo) WriteDB() *articleLikeDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleLikeDo) Session(config *gorm.Session) *articleLikeDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleLikeDo) Clauses(conds ...clause.Expression) *articleLikeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleLikeDo) Returning(value interface{}, columns ...string) *articleLikeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleLikeDo) Not(conds ...gen.Condition) *articleLikeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleLikeDo) Or(conds ...gen.Condition) *articleLikeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleLikeDo) Select(conds ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleLikeDo) Where(conds ...gen.Condition) *articleLikeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleLikeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *articleLikeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a articleLikeDo) Order(conds ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleLikeDo) Distinct(cols ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleLikeDo) Omit(cols ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleLikeDo) Join(table schema.Tabler, on ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleLikeDo) Group(cols ...field.Expr) *articleLikeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleLikeDo) Having(conds ...gen.Condition) *articleLikeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleLikeDo) Limit(limit int) *articleLikeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleLikeDo) Offset(offset int) *articleLikeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *articleLikeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleLikeDo) Unscoped() *articleLikeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleLikeDo) Create(values ...*model.ArticleLike) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleLikeDo) CreateInBatches(values []*model.ArticleLike, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleLikeDo) Save(values ...*model.ArticleLike) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleLikeDo) First() (*model.ArticleLike, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleLike), nil
	}
}

func (a articleLikeDo) Take() (*model.ArticleLike, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleLike), nil
	}
}

func (a articleLikeDo) Last() (*model.ArticleLike, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleLike), nil
	}
}

func (a articleLikeDo) Find() ([]*model.ArticleLike, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleLike), err
}

func (a articleLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleLike, err error) {
	buf := make([]*model.ArticleLike, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleLikeDo) FindInBatches(result *[]*model.ArticleLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleLikeDo) Attrs(attrs ...field.AssignExpr) *articleLikeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleLikeDo) Assign(attrs ...field.AssignExpr) *articleLikeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleLikeDo) Joins(fields ...field.RelationField) *articleLikeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleLikeDo) Preload(fields ...field.RelationField) *articleLikeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleLikeDo) FirstOrInit() (*model.ArticleLike, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleLike), nil
	}
}

func (a articleLikeDo) FirstOrCreate() (*model.ArticleLike, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleLike), nil
	}
}

func (a articleLikeDo) FindByPage(offset int, limit int) (result []*model.ArticleLike, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleLikeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleLikeDo) Delete(models ...*model.ArticleLike) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleLikeDo) withDO(do gen.Dao) *articleLikeDo {
	a.DO = *do.(*gen.DO)
	return a
}
